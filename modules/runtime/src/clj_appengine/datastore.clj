(ns clj-appengine.datastore
(:import [com.google.appengine.api.datastore DatastoreServiceFactory Entity]))

(defonce ^:dynamic *datastore-service* (atom nil))

(defn datastore-service []
  (when (nil? @*datastore-service*)
    (reset! *datastore-service* (DatastoreServiceFactory/getDatastoreService)))
    @*datastore-service*)

(defn- map-properties [^Entity entity properties]
  (doseq [keyval properties]
    (.setProperty entity (name (key keyval)) (val keyval))))

(defmacro with-transaction [& body]
  `(let [transaction# (.beginTransaction (datastore-service))]
     (try
       (let [result# (do ~@body)]
         (.commit transaction#)
         result#)
       (catch Throwable e#
         (do (.rollback transaction#)
             (throw e#))))))

(defmacro defentity [name properties]
  `(defrecord ~name ~properties))

(defn entity
  "Creates a new Datastore Entity. If identifier is not provided it gets autogenerated."
  ([^String typeName identifier properties]
   (let [e (Entity. typeName identifier)]
     (map-properties e properties)
     e))
  ([^String typeName properties]
   (let [e (Entity. typeName)]
     (map-properties e properties)
     e)))

(defn put [^Entity entity]
  (.put (datastore-service) entity))

(defn delete [^Entity entity]
  (.delete (datastore-service) entity))

